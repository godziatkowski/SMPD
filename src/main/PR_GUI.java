package main;

import Jama.*;
import classifier.*;
import java.io.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import probesUtilities.FeatureSelector;
import probesUtilities.ProbePerClassSeparator;

import static probesUtilities.ProbesPerTrainingAndTestSetSplitter.*;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PR_GUI.java
 *
 * Created on 2015-03-05, 19:40:56
 */
/**
 *
 * @author krzy
 */
public class PR_GUI extends javax.swing.JFrame {
    private static final String SUCCESS_RATE = "Success rate: ";

    private int bestAttributeIndex = -1;

    private String InData; // dataset from a text file will be placed here
    private int ClassCount = 0, FeatureCount = 0;
    private double[][] F, FNew; // original feature matrix and transformed feature matrix
    private int[] ClassLabels, SampleCount;
    private String[] ClassNames;
    private List<Map<String, double[][]>> groupedProbesSplittedPerTrainingAndTestSet;
    private Map<String, double[][]> probesGroupedByClass;
    private final ProbePerClassSeparator probePerClassSeparator;
    private Set<Integer> selectedFeatures = new HashSet<>();
    private JLabel jLabelSuccessRate;

    /**
     * Creates new form PR_GUI
     */
    public PR_GUI() {
        probePerClassSeparator = new ProbePerClassSeparator();
        initComponents();
        setSize( 800, 410 );

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        rbg_F = new javax.swing.ButtonGroup();
        b_read = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        l_dataset_name_l = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        l_dataset_name = new javax.swing.JLabel();
        l_nfeatures = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        selbox_nfeat = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        f_rb_ext = new javax.swing.JRadioButton();
        f_rb_sel = new javax.swing.JRadioButton();
        b_deriveFS = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        featureSelectionCriteria = new javax.swing.JComboBox();
        f_combo_PCA_LDA = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        tf_PCA_Energy = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        l_NewDim = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        b_Train = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        tf_TrainSetSize = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        kJSpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        validationMethod = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        l_FLD_winner = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        l_FLD_val = new javax.swing.JLabel();
        jLabelSuccessRate = new javax.swing.JLabel();

        setDefaultCloseOperation( javax.swing.WindowConstants.EXIT_ON_CLOSE );
        getContentPane().setLayout( null );

        b_read.setText( "Read dataset" );
        b_read.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( java.awt.event.ActionEvent evt ) {
                b_readActionPerformed( evt );
            }
        } );
        getContentPane().add( b_read );
        b_read.setBounds( 10, 10, 130, 23 );

        jPanel2.setBackground( new java.awt.Color( 204, 255, 255 ) );
        jPanel2.setBorder( javax.swing.BorderFactory.createEtchedBorder() );

        jLabel1.setFont( new java.awt.Font( "Comic Sans MS", 0, 18 ) ); // NOI18N
        jLabel1.setText( "Dataset info" );

        l_dataset_name_l.setText( "Name:" );

        jLabel3.setText( "Classes:" );

        jLabel4.setText( "Features:" );

        l_dataset_name.setText( "..." );

        l_nfeatures.setText( "..." );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout( jPanel2 );
        jPanel2.setLayout( jPanel2Layout );
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING )
                .addGroup( javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                           .addContainerGap()
                           .addGroup( jPanel2Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING )
                                   .addComponent( jLabel1 )
                                   .addGroup( jPanel2Layout.createSequentialGroup()
                                           .addComponent( l_dataset_name_l )
                                           .addGap( 18, 18, 18 )
                                           .addComponent( l_dataset_name, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE ) ) )
                           .addGap( 18, 18, 18 )
                           .addGroup( jPanel2Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.TRAILING )
                                   .addGroup( jPanel2Layout.createSequentialGroup()
                                           .addComponent( jLabel4 )
                                           .addPreferredGap( javax.swing.LayoutStyle.ComponentPlacement.RELATED )
                                           .addComponent( l_nfeatures, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE ) )
                                   .addComponent( jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE ) )
                           .addGap( 20, 20, 20 ) )
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING )
                .addGroup( jPanel2Layout.createSequentialGroup()
                        .addGroup( jPanel2Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.BASELINE )
                                .addComponent( jLabel1 )
                                .addComponent( jLabel3 ) )
                        .addGap( 10, 10, 10 )
                        .addGroup( jPanel2Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.BASELINE )
                                .addComponent( l_dataset_name_l )
                                .addComponent( jLabel4 )
                                .addComponent( l_dataset_name )
                                .addComponent( l_nfeatures ) )
                        .addContainerGap( 26, Short.MAX_VALUE ) )
        );

        getContentPane().add( jPanel2 );
        jPanel2.setBounds( 10, 50, 360, 80 );

        jButton2.setText( "Parse dataset" );
        jButton2.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( java.awt.event.ActionEvent evt ) {
                jButton2ActionPerformed( evt );
            }
        } );
        getContentPane().add( jButton2 );
        jButton2.setBounds( 240, 10, 130, 23 );

        jPanel3.setBackground( new java.awt.Color( 255, 255, 204 ) );
        jPanel3.setBorder( javax.swing.BorderFactory.createEtchedBorder() );
        jPanel3.setLayout( null );

        jLabel5.setFont( new java.awt.Font( "Comic Sans MS", 0, 18 ) ); // NOI18N
        jLabel5.setText( "Feature space" );
        jPanel3.add( jLabel5 );
        jLabel5.setBounds( 14, 2, 118, 26 );

        jLabel6.setText( "FS Dimension" );
        jPanel3.add( jLabel6 );
        jLabel6.setBounds( 178, 9, 63, 14 );

        selbox_nfeat.setModel( new javax.swing.DefaultComboBoxModel(
                new String[]{ 
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" ,"63", "64"
                } ) );
        jPanel3.add( selbox_nfeat );
        selbox_nfeat.setBounds( 298, 6, 50, 20 );
        jPanel3.add( jSeparator1 );
        jSeparator1.setBounds( 14, 41, 340, 10 );

        f_rb_ext.setBackground( new java.awt.Color( 255, 255, 204 ) );
        rbg_F.add( f_rb_ext );
        f_rb_ext.setText( "Feature extraction" );
        f_rb_ext.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( java.awt.event.ActionEvent evt ) {
                f_rb_extActionPerformed( evt );
            }
        } );
        jPanel3.add( f_rb_ext );
        f_rb_ext.setBounds( 10, 110, 190, 23 );

        f_rb_sel.setBackground( new java.awt.Color( 255, 255, 204 ) );
        rbg_F.add( f_rb_sel );
        f_rb_sel.setSelected( true );
        f_rb_sel.setText( "Feature selection" );
        f_rb_sel.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( java.awt.event.ActionEvent evt ) {
                f_rb_selActionPerformed( evt );
            }
        } );
        jPanel3.add( f_rb_sel );
        f_rb_sel.setBounds( 10, 60, 190, 23 );

        b_deriveFS.setText( "Derive Feature Space" );
        b_deriveFS.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( java.awt.event.ActionEvent evt ) {
                findBestAttributes( evt );
            }
        } );
        jPanel3.add( b_deriveFS );
        b_deriveFS.setBounds( 10, 180, 340, 23 );

        jLabel10.setText( "Criterion" );
        jPanel3.add( jLabel10 );
        jLabel10.setBounds( 270, 50, 41, 14 );

        featureSelectionCriteria.setModel( new javax.swing.DefaultComboBoxModel( new String[]{ "Fisher discriminant", "SFS" } ) );
        jPanel3.add( featureSelectionCriteria );
        featureSelectionCriteria.setBounds( 210, 70, 140, 20 );

        f_combo_PCA_LDA.setModel( new javax.swing.DefaultComboBoxModel( new String[]{ "PCA", "LDA" } ) );
        f_combo_PCA_LDA.setEnabled( false );
        jPanel3.add( f_combo_PCA_LDA );
        f_combo_PCA_LDA.setBounds( 210, 110, 140, 20 );

        jLabel12.setText( "Energy" );
        jPanel3.add( jLabel12 );
        jLabel12.setBounds( 20, 150, 34, 14 );

        tf_PCA_Energy.setText( "80" );
        jPanel3.add( tf_PCA_Energy );
        tf_PCA_Energy.setBounds( 70, 150, 30, 20 );

        jLabel14.setText( "%" );
        jPanel3.add( jLabel14 );
        jLabel14.setBounds( 110, 150, 20, 14 );

        jLabel15.setText( "New dimension:" );
        jPanel3.add( jLabel15 );
        jLabel15.setBounds( 190, 150, 100, 14 );

        l_NewDim.setText( "..." );
        jPanel3.add( l_NewDim );
        l_NewDim.setBounds( 300, 150, 50, 14 );

        getContentPane().add( jPanel3 );
        jPanel3.setBounds( 10, 140, 360, 220 );

        jPanel1.setBackground( new java.awt.Color( 255, 255, 255 ) );
        jPanel1.setBorder( javax.swing.BorderFactory.createEtchedBorder() );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout( jPanel1 );
        jPanel1.setLayout( jPanel1Layout );
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING )
                .addGap( 0, 196, Short.MAX_VALUE )
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING )
                .addGap( 0, 126, Short.MAX_VALUE )
        );

        getContentPane().add( jPanel1 );
//    jPanel1.setBounds(580, 10, 200, 130);

        jPanel4.setBackground( new java.awt.Color( 204, 255, 204 ) );
        jPanel4.setBorder( javax.swing.BorderFactory.createEtchedBorder() );
        jPanel4.setLayout( null );

        jLabel8.setFont( new java.awt.Font( "Comic Sans MS", 0, 18 ) ); // NOI18N
        jLabel8.setText( "Classifier" );
        jPanel4.add( jLabel8 );
        jLabel8.setBounds( 10, 0, 79, 26 );

        jLabel9.setText( "Method" );
        jPanel4.add( jLabel9 );
        jLabel9.setBounds( 14, 44, 36, 14 );

        jComboBox2.setModel( new javax.swing.DefaultComboBoxModel( new String[]{ "Nearest neighbor (NN)", "Nearest Mean (NM)", "k-Nearest Neighbor (k-NN)", "k-Nearest Mean (k-NM)" } ) );
        jPanel4.add( jComboBox2 );
        jComboBox2.setBounds( 74, 41, 152, 20 );

        b_Train.setText( "Train" );
        b_Train.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( java.awt.event.ActionEvent evt ) {
                trainPerformed( evt );
            }
        } );
        jPanel4.add( b_Train );
        b_Train.setBounds( 40, 130, 98, 23 );

        jButton4.setText( "Execute" );
        jButton4.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( java.awt.event.ActionEvent evt ) {
                executePerformed( evt );
            }
        } );
        jPanel4.add( jButton4 );
        jButton4.setBounds( 210, 130, 96, 23 );

        jLabel16.setText( "Training part:" );
        jPanel4.add( jLabel16 );
        jLabel16.setBounds( 20, 170, 80, 14 );

        jLabelSuccessRate.setText( SUCCESS_RATE );
        jPanel4.add( jLabelSuccessRate );
        jLabelSuccessRate.setBounds( 220, 170, 180, 14 );

        tf_TrainSetSize.setText( "80" );
        jPanel4.add( tf_TrainSetSize );
        tf_TrainSetSize.setBounds( 110, 170, 20, 20 );

        jLabel17.setText( "%" );
        jPanel4.add( jLabel17 );
        jLabel17.setBounds( 140, 170, 20, 14 );

        kJSpinner.setModel( new javax.swing.SpinnerNumberModel( 1, 1, 25, 1 ) );
        jPanel4.add( kJSpinner );
        kJSpinner.setBounds( 270, 40, 50, 20 );
        kJSpinner.getAccessibleContext().setAccessibleName( "" );

        jLabel7.setHorizontalAlignment( javax.swing.SwingConstants.CENTER );
        jLabel7.setLabelFor( kJSpinner );
        jLabel7.setText( "K:" );
        jLabel7.setToolTipText( "" );
        jPanel4.add( jLabel7 );
        jLabel7.setBounds( 244, 40, 20, 20 );

        jLabel11.setText( "Validation" );
        jPanel4.add( jLabel11 );
        jLabel11.setBounds( 10, 80, 50, 14 );

        validationMethod.setModel( new javax.swing.DefaultComboBoxModel( new String[]{ "Simple", "Cross Validation", "Bootstrap" } ) );
        validationMethod.setSelectedIndex( 0 );
        jPanel4.add( validationMethod );
        validationMethod.setBounds( 70, 80, 160, 20 );

        getContentPane().add( jPanel4 );
        jPanel4.setBounds( 380, 150, 400, 210 );

        jPanel5.setBorder( javax.swing.BorderFactory.createTitledBorder( "Results" ) );
        jPanel5.setLayout( null );

        jLabel2.setText( "FS Winner:" );
        jPanel5.add( jLabel2 );
        jLabel2.setBounds( 10, 30, 70, 14 );

        l_FLD_winner.setText( "xxx" );
        jPanel5.add( l_FLD_winner );
        l_FLD_winner.setBounds( 100, 30, 300, 14 );

        jLabel13.setText( "FLD value: " );
        jPanel5.add( jLabel13 );
        jLabel13.setBounds( 10, 60, 70, 14 );

        l_FLD_val.setText( "vvv" );
        jPanel5.add( l_FLD_val );
        l_FLD_val.setBounds( 100, 60, 48, 14 );

        getContentPane().add( jPanel5 );
        jPanel5.setBounds( 380, 10, 390, 130 );

        pack();
    }// </editor-fold>                        

    private void f_rb_selActionPerformed( java.awt.event.ActionEvent evt ) {
        featureSelectionCriteria.setEnabled( true );
        f_combo_PCA_LDA.setEnabled( false );
    }

    private void f_rb_extActionPerformed( java.awt.event.ActionEvent evt ) {
        featureSelectionCriteria.setEnabled( false );
        f_combo_PCA_LDA.setEnabled( true );
    }

    private void b_readActionPerformed( java.awt.event.ActionEvent evt ) {
        // reads in a text file; contents is placed into a variable of String type
        InData = readDataSet();
    }

    private void jButton2ActionPerformed( java.awt.event.ActionEvent evt ) {
        // Analyze text inputted from a file: determine class number and labels and number
        // of features; build feature matrix: columns - samples, rows - features
        try {
            if ( InData != null ) {
                getDatasetParameters();
                l_nfeatures.setText( FeatureCount + "" );
                fillFeatureMatrix();
                probePerClassSeparator.separateProbesPerClass( ClassNames, FeatureCount, SampleCount, F );
                probesGroupedByClass = probePerClassSeparator.probesGroupedByClass;
            }
        } catch ( Exception ex ) {
            JOptionPane.showMessageDialog( this, ex.getMessage() );
        }

    }

    private void findBestAttributes( java.awt.event.ActionEvent evt ) {
        if ( F == null ) {
            return;
        }
        selectedFeatures.clear();
        if ( f_rb_sel.isSelected() ) {
            int numberOfExpectedDimensions = Integer.parseInt( (String) selbox_nfeat.getSelectedItem() );
            switch ( featureSelectionCriteria.getSelectedItem().toString() ) {
                case "Fisher discriminant":
                    if ( numberOfExpectedDimensions == 1 ) {
                        double FLD = 0, tmp;
                        int bestFeatureIndex = -1;
                        for ( int i = 0; i < FeatureCount; i++ ) {
                            if ( ( tmp = computeFisherLD( F[i] ) ) > FLD ) {
                                FLD = tmp;
                                bestFeatureIndex = i;
                            }
                        }
                        l_FLD_winner.setText( bestFeatureIndex + "" );
                        l_FLD_val.setText( FLD + "" );

                        selectedFeatures.add( bestFeatureIndex );
                    } else {
                        selectedFeatures = new FeatureSelector().getBestAttribtesUsingFisher( probesGroupedByClass, numberOfExpectedDimensions ) ;

                        l_FLD_winner.setText( convertSetOfIntegersToString( selectedFeatures ) );
                    }
                    break;
                case "SFS":
                    FeatureSelector sFSFeatureSelector = new FeatureSelector();
                    selectedFeatures = sFSFeatureSelector.selectBestFeatureIndexesUsingSFS(probesGroupedByClass, numberOfExpectedDimensions, ClassLabels, SampleCount );
                    l_FLD_winner.setText( convertSetOfIntegersToString( selectedFeatures ) );
                    break;
                default:
                    break;
            }

        } else if ( f_rb_ext.isSelected() ) {
            double TotEnergy = Double.parseDouble( tf_PCA_Energy.getText() ) / 100.0;
            int k = 0;
            double[][] FFNorm = centerAroundMean( F );
            Matrix Cov = computeCovarianceMatrix( FFNorm );
            Matrix TransformMat = extractFeatures( Cov, TotEnergy, k );
            FNew = projectSamples( new Matrix( FFNorm ), TransformMat );
            l_NewDim.setText( FNew.length + "" );
        }
    }
    
//****************************************************************************** TRAIN

    private void trainPerformed( java.awt.event.ActionEvent evt ) {

        double percentageDistribution = getPercentageDistributionBetweenTestAndTrainSets();
//        printProbes(probesGroupedByClass);
//        printProbes(groupedProbesSplittedPerTrainingAndTestSet);
        switch ( validationMethod.getSelectedIndex() ) {
            case 0:
                groupedProbesSplittedPerTrainingAndTestSet = simpleValidationProbeSplitter( probesGroupedByClass, percentageDistribution );
                break;
            case 1:
                groupedProbesSplittedPerTrainingAndTestSet = crossValidationProbeSplitter( F, 10, ClassNames, SampleCount );
                break;
            case 2:
                groupedProbesSplittedPerTrainingAndTestSet = bootstrapValidationProbeSplitter( F, 10, ClassNames, SampleCount );
                break;
            default:
                break;
        }

    }

    private void executePerformed( java.awt.event.ActionEvent evt ) {
        IClassifier classifier;
        double successRate = 0.0;
        switch ( validationMethod.getSelectedIndex() ) {
            case 0:
                successRate += validateClassifier( groupedProbesSplittedPerTrainingAndTestSet.get( 0 ) );
                break;
            case 1:
                for ( Map<String, double[][]> groupedProbes : groupedProbesSplittedPerTrainingAndTestSet ) {
                    successRate += validateClassifier( groupedProbes );
                }
                successRate = successRate / groupedProbesSplittedPerTrainingAndTestSet.size();
                break;
            case 2:
                for ( Map<String, double[][]> groupedProbes : groupedProbesSplittedPerTrainingAndTestSet ) {
                    successRate += validateClassifier( groupedProbes );
                }
                successRate = successRate / groupedProbesSplittedPerTrainingAndTestSet.size();
                break;
            default:
                break;
        }

        System.out.println( "Success rate " + successRate );
        jLabelSuccessRate.setText( SUCCESS_RATE + round( successRate ) + "%" );

    }

    private double validateClassifier( Map<String, double[][]> probes ) {
        double successRate = 0.0;
        IClassifier classifier;
//        printProbes( probes );
        switch ( jComboBox2.getSelectedIndex() ) {
            case 0:
                classifier = new NNClassifier();
                successRate = classifier.train( probes, selectedFeatures );
                break;
            case 1:
                classifier = new NMClassifier();
                successRate = classifier.train( probes, selectedFeatures );
                break;
            case 2:
                int k = (int) kJSpinner.getValue();
                IKClassifier kClassifier = new KNNClassifier();
                successRate = kClassifier.train( probes, selectedFeatures, k );
                break;
            case 3:
                KNMClassifier knmClassifier = new KNMClassifier();
                successRate = knmClassifier.train( probes, selectedFeatures );
                break;
            default:
                break;
        }
        System.out.println( "success rate in try " + successRate );
        return successRate;
    }

    private double getPercentageDistributionBetweenTestAndTrainSets() throws NumberFormatException {
        double percentageDistribution = Double.parseDouble( tf_TrainSetSize.getText() ) / 100.0;
        return percentageDistribution;
    }

    private void printProbes( Map<String, double[][]> probesGroupedByClass ) {
        probesGroupedByClass.entrySet().forEach( entry -> {
            System.out.println( entry.getKey() );
            System.out.println( "There is " + entry.getValue()[0].length + " probes in for " + entry.getKey() + " class" );
            System.out.println( "Each probe has " + entry.getValue().length + " attributes" );
            for ( int i = 0; i < entry.getValue().length; i++ ) {
                String probe = "Attribute: ";
                for ( int j = 0; j < entry.getValue()[i].length; j++ ) {
                    probe += entry.getValue()[i][j] + ",";
                }
                System.out.println( probe );
            }

            System.out.println( "\n\n\n\n\n\n\n\n\n" );

        } );
    }

    /**
     * @param args the command line arguments
     */
    public static void main( String args[] ) {

        java.awt.EventQueue.invokeLater( new Runnable() {
            public void run() {
                new PR_GUI().setVisible( true );
            }
        } );
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton b_Train;
    private javax.swing.JButton b_deriveFS;
    private javax.swing.JButton b_read;
    private javax.swing.JComboBox f_combo_PCA_LDA;
    private javax.swing.JRadioButton f_rb_ext;
    private javax.swing.JRadioButton f_rb_sel;
    private javax.swing.JComboBox featureSelectionCriteria;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSpinner kJSpinner;
    private javax.swing.JLabel l_FLD_val;
    private javax.swing.JLabel l_FLD_winner;
    private javax.swing.JLabel l_NewDim;
    private javax.swing.JLabel l_dataset_name;
    private javax.swing.JLabel l_dataset_name_l;
    private javax.swing.JLabel l_nfeatures;
    private javax.swing.ButtonGroup rbg_F;
    private javax.swing.JComboBox selbox_nfeat;
    private javax.swing.JTextField tf_PCA_Energy;
    private javax.swing.JTextField tf_TrainSetSize;
    private javax.swing.JComboBox validationMethod;
    // End of variables declaration                   

    private String readDataSet() {

        String s_tmp, s_out = "";
        JFileChooser jfc = new JFileChooser();
        jfc.setCurrentDirectory( new File( ".." ) );
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Datasets - plain text files", "txt" );
        jfc.setFileFilter( filter );
        if ( jfc.showOpenDialog( this ) == JFileChooser.APPROVE_OPTION ) {
            try {
                BufferedReader br = new BufferedReader( new FileReader( jfc.getSelectedFile() ) );
                while ( ( s_tmp = br.readLine() ) != null ) {
                    s_out += s_tmp + '$';
                }
                br.close();
                l_dataset_name.setText( jfc.getSelectedFile().getName() );
            } catch ( Exception e ) {
            }
        }
        return s_out;
    }

    private void getDatasetParameters() throws Exception {
        // based on data stored in InData determine: class count and names, number of samples 
        // and number of features; set the corresponding variables
        String stmp = InData, saux = "";
        // analyze the first line and get feature count: assume that number of features
        // equals number of commas
        saux = InData.substring( InData.indexOf( ',' ) + 1, InData.indexOf( '$' ) );
        if ( saux.length() == 0 ) {
            throw new Exception( "The first line is empty" );
        }
        // saux stores the first line beginning from the first comma
        int count = 0;
        while ( saux.indexOf( ',' ) > 0 ) {
            saux = saux.substring( saux.indexOf( ',' ) + 1 );
            count++;
        }
        FeatureCount = count + 1; // the first parameter
        // Determine number of classes, class names and number of samples per class
        boolean New;
        int index = -1;
        List<String> NameList = new ArrayList<String>();
        List<Integer> CountList = new ArrayList<Integer>();
        List<Integer> LabelList = new ArrayList<Integer>();
        while ( stmp.length() > 1 ) {
            saux = stmp.substring( 0, stmp.indexOf( ' ' ) );
            New = true;
            index++; // new class index
            for ( int i = 0; i < NameList.size(); i++ ) {
                if ( saux.equals( NameList.get( i ) ) ) {
                    New = false;
                    index = i; // class index
                }
            }
            if ( New ) {
                NameList.add( saux );
                CountList.add( 0 );
            } else {
                CountList.set( index, CountList.get( index ).intValue() + 1 );
            }
            LabelList.add( index ); // class index for current row
            stmp = stmp.substring( stmp.indexOf( '$' ) + 1 );
        }
        // based on results of the above analysis, create variables        
        ClassNames = new String[NameList.size()];
        for ( int i = 0; i < ClassNames.length; i++ ) {
            ClassNames[i] = NameList.get( i );
        }
        SampleCount = new int[CountList.size()];
        for ( int i = 0; i < SampleCount.length; i++ ) {
            SampleCount[i] = CountList.get( i ).intValue() + 1;
        }
        ClassLabels = new int[LabelList.size()];
        for ( int i = 0; i < ClassLabels.length; i++ ) {
            ClassLabels[i] = LabelList.get( i ).intValue();
        }
    }

    private void fillFeatureMatrix() throws Exception {
        // having determined array size and class labels, fills in the feature matrix
        int n = 0;
        String saux, stmp = InData;
        for ( int i = 0; i < SampleCount.length; i++ ) {
            n += SampleCount[i];
        }
        if ( n <= 0 ) {
            throw new Exception( "no samples found" );
        }
        F = new double[FeatureCount][n]; // samples are placed column-wise
        for ( int j = 0; j < n; j++ ) {
            saux = stmp.substring( 0, stmp.indexOf( '$' ) );
            saux = saux.substring( stmp.indexOf( ',' ) + 1 );
            for ( int i = 0; i < FeatureCount - 1; i++ ) {
                F[i][j] = Double.parseDouble( saux.substring( 0, saux.indexOf( ',' ) ) );
                saux = saux.substring( saux.indexOf( ',' ) + 1 );
            }
            F[FeatureCount - 1][j] = Double.parseDouble( saux );
            stmp = stmp.substring( stmp.indexOf( '$' ) + 1 );
        }
        int cc = 1;
    }

    private void selectFeatures( int[] flags, int d ) {
        // for now: check all individual features using 1D, 2-class Fisher criterion

        if ( d == 1 ) {
            double FLD = 0, tmp;
            int max_ind = -1;
            for ( int i = 0; i < FeatureCount; i++ ) {
                if ( ( tmp = computeFisherLD( F[i] ) ) > FLD ) {
                    FLD = tmp;
                    max_ind = i;
                }
            }
            bestAttributeIndex = max_ind;
            l_FLD_winner.setText( max_ind + "" );
            l_FLD_val.setText( FLD + "" );
        }
        // to do: compute for higher dimensional spaces, use e.g. SFS for candidate selection
    }

    private double computeFisherLD( double[] vec ) {
        // 1D, 2-classes
        double mA = 0, mB = 0, sA = 0, sB = 0;
        for ( int i = 0; i < vec.length; i++ ) {
            if ( ClassLabels[i] == 0 ) {
                mA += vec[i];
                sA += vec[i] * vec[i];
            } else {
                mB += vec[i];
                sB += vec[i] * vec[i];
            }
        }
        mA /= SampleCount[0];
        mB /= SampleCount[1];
        sA = sA / SampleCount[0] - mA * mA;
        sB = sB / SampleCount[1] - mB * mB;
        return Math.abs( mA - mB ) / ( Math.sqrt( sA ) + Math.sqrt( sB ) );
    }

    private Matrix extractFeatures( Matrix C, double Ek, int k ) {

        Matrix evecs, evals;
        // compute eigenvalues and eigenvectors
        evecs = C.eig().getV();
        evals = C.eig().getD();

        // PM: projection matrix that will hold a set dominant eigenvectors
        Matrix PM;
        if ( k > 0 ) {
            // preset dimension of new feature space
//            PM = new double[evecs.getRowDimension()][k];
            PM = evecs.getMatrix( 0, evecs.getRowDimension() - 1,
                                  evecs.getColumnDimension() - k, evecs.getColumnDimension() - 1 );
        } else {
            // dimension will be determined based on scatter energy
            double TotEVal = evals.trace(); // total energy
            double EAccum = 0;
            int m = evals.getColumnDimension() - 1;
            while ( EAccum < Ek * TotEVal ) {
                EAccum += evals.get( m, m );
                m--;
            }
            PM = evecs.getMatrix( 0, evecs.getRowDimension() - 1, m + 1, evecs.getColumnDimension() - 1 );
        }

        /*            System.out.println("Eigenvectors");                
         for(int i=0; i<r; i++){
         for(int j=0; j<c; j++){
         System.out.print(evecs[i][j]+" ");
         }
         System.out.println();                
         }
         System.out.println("Eigenvalues");                
         for(int i=0; i<r; i++){
         for(int j=0; j<c; j++){
         System.out.print(evals[i][j]+" ");
         }
         System.out.println();                
         }
         */
        return PM;
    }

    private Matrix computeCovarianceMatrix( double[][] m ) {
//        double[][] C = new double[M.length][M.length];

        Matrix M = new Matrix( m );
        Matrix MT = M.transpose();
        Matrix C = M.times( MT );
        return C;
    }

    private double[][] centerAroundMean( double[][] M ) {

        double[] mean = new double[M.length];
        for ( int i = 0; i < M.length; i++ ) {
            for ( int j = 0; j < M[0].length; j++ ) {
                mean[i] += M[i][j];
            }
        }
        for ( int i = 0; i < M.length; i++ ) {
            mean[i] /= M[0].length;
        }
        for ( int i = 0; i < M.length; i++ ) {
            for ( int j = 0; j < M[0].length; j++ ) {
                M[i][j] -= mean[i];
            }
        }
        return M;
    }

    private double[][] projectSamples( Matrix FOld, Matrix TransformMat ) {

        return ( FOld.transpose().times( TransformMat ) ).transpose().getArrayCopy();
    }

    private String convertSetOfIntegersToString( Set<Integer> integers ) {
        StringBuilder sb = new StringBuilder( "" );
        integers.stream().forEach( ( integer ) -> {
            sb.append( integer ).append( ", " );
        } );
        return sb.toString();
    }

    public static double round( double value ) {
        int places = 2;
        if ( places < 0 ) {
            throw new IllegalArgumentException();
        }

        long factor = (long) Math.pow( 10, places );
        value = value * factor;
        long tmp = Math.round( value );
        return (double) tmp / factor;
    }
}
